[["data-wrangling.html", "4 Data Wrangling 4.1 Base R 4.2 The new way: dplyr 4.3 The only data verbs youll ever need", " 4 Data Wrangling If rapid publication-ready figures is Rs greatest advantage over other software packages, then rapid data manipulation is a close second. 4.1 Base R As we already covered in an earlier chapter, Rs base packages make quick work of performing the same operation for every item in a list of numbers. my_vec &lt;- c(5, 4, 3, 7) my_roots &lt;- sqrt(my_vec) To achieve the same thing in Python, you would need a much wordier list comprehension. my_vec = [5, 4, 3, 7] my_roots = [sqrt(num) for num in my_vec] 4.2 The new way: dplyr Although the base R packages are effective on their own, they suffer from a few drawbacks. For one, they are not always consistent with one another. Moreover, data manipulation almost always involves several steps and the base R approach is not especially useful for making data manipulation pipelines. To solve these and many other problems, the dplyr (pronounced DEE-ply-er) packages was developed with a consistent set of human-readable functions that always (a) take a dataframe as their first argument and (b) return a dataframe as their output. Together, this allows you to string them together in a convenient human-readable pipeline. Like ggplot, the dplyr package is opinionated. It thinks that data manipulation should almost always be done a certain way. Specifically, if you are working with rectangular data - that is, data that can be cleanly expressed in the form of a spreadsheet - then youll be able to accomplish almost all of your data manipulation with the following verbs (functions). 4.3 The only data verbs youll ever need For simplicity, well again use the cancer dataset from the visualization chapter. We do this because, although an ABCD dataset would be more topical, they are often very large, which would make it hard to eye-ball whether our data manipulation went according to plan. library(tidyverse) my_data &lt;- haven::read_spss(&#39;data/cancer.sav&#39;) 4.3.1 rename() The cancer dataset is great the way it is, simple and organized. But it has one feature we might want to change right away, which is its naming conventions. names(my_data) ## [1] &quot;ID&quot; &quot;TRT&quot; &quot;AGE&quot; &quot;WEIGHIN&quot; &quot;STAGE&quot; &quot;TOTALCIN&quot; &quot;TOTALCW2&quot; ## [8] &quot;TOTALCW4&quot; &quot;TOTALCW6&quot; To rename any one of these variables, simply call the rename() function, and tell it which old variable you want to give which new name. Dont forget to save your result into an object too, so that your changes dont disappear into nowhere. my_data &lt;- my_data %&gt;% rename(subject_id = ID, condition = TRT) names(my_data) ## [1] &quot;subject_id&quot; &quot;condition&quot; &quot;AGE&quot; &quot;WEIGHIN&quot; &quot;STAGE&quot; &quot;TOTALCIN&quot; ## [7] &quot;TOTALCW2&quot; &quot;TOTALCW4&quot; &quot;TOTALCW6&quot; This is great if we just want to change a few variable names, but sometimes we want to change all of them in a particular way. For that, we can use rename_with(), which will apply a function to every variable name. For example, we might want to turn all of the variable names to lowercase. To achieve that, we just feed the tolower() function, which turns anything it comes across into lowercase, to the rename_with() function. Now all of our variable names are in the same case and we are less likely to make a mistake later. my_data &lt;- my_data %&gt;% rename_with(tolower) names(my_data) ## [1] &quot;subject_id&quot; &quot;condition&quot; &quot;age&quot; &quot;weighin&quot; &quot;stage&quot; &quot;totalcin&quot; ## [7] &quot;totalcw2&quot; &quot;totalcw4&quot; &quot;totalcw6&quot; 4.3.2 select() This verb allows you to retain only a subset of variables. You can do this by naming them explicitly my_data %&gt;% select(subject_id, condition, age) ## # A tibble: 25 x 3 ## subject_id condition age ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0 52 ## 2 5 0 77 ## 3 6 0 60 ## 4 9 0 61 ## 5 11 0 59 ## 6 15 0 69 ## 7 21 0 67 ## 8 26 0 56 ## 9 31 0 61 ## 10 35 0 51 ## # ... with 15 more rows  or by using one of dplyrs select helper functions, like starts_with() and ends_with(). my_data %&gt;% select(starts_with(&#39;total&#39;)) ## # A tibble: 25 x 4 ## totalcin totalcw2 totalcw4 totalcw6 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 6 6 6 7 ## 2 9 6 10 9 ## 3 7 9 17 19 ## 4 6 7 9 3 ## 5 6 7 16 13 ## 6 6 6 6 11 ## 7 6 11 11 10 ## 8 6 11 15 15 ## 9 6 9 6 8 ## 10 6 4 8 7 ## # ... with 15 more rows 4.3.3 mutate() Assuming we have selected our major variables of interest, we can now use mutate() to change existing columns or make new ones. For example, if we wanted to compute the average of totalcw2, totalcw4, and totalcw6, we could do it like this. my_data &lt;- my_data %&gt;% mutate(meanc = (totalcw2 + totalcw4 + totalcw6)/3) my_data %&gt;% select(subject_id, meanc) %&gt;% head() ## # A tibble: 6 x 2 ## subject_id meanc ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 6.33 ## 2 5 8.33 ## 3 6 15 ## 4 9 6.33 ## 5 11 12 ## 6 15 7.67 4.3.4 group_by() and summarize() These two verbs are technically distinct, but are almost always used in combination. To explain, group_by() tells R to do whatever comes NEXT separately for each group. In turn, summarize() is like mutate() in that it makes new columns; however, it makes new columns by aggregating information across rows in a given group. Thus, when using summarize() to make a new column, you will also end up with just one row per group, like so. my_data %&gt;% group_by(condition, stage) %&gt;% summarise(ave_weight = mean(weighin)) ## `summarise()` has grouped output by &#39;condition&#39;. You can override using the `.groups` ## argument. ## # A tibble: 8 x 3 ## # Groups: condition [2] ## condition stage ave_weight ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 1 180. ## 2 0 2 155. ## 3 0 3 158 ## 4 0 4 143. ## 5 1 0 182. ## 6 1 1 179. ## 7 1 2 196. ## 8 1 4 209. As you can see, we can group by multiple variables at the same time and quickly get the kind of information we would need for a demographics table - in this case, the average weight of subjects by both condition and cancer stage. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
