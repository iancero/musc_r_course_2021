[["index.html", "An Organic R Textbook 1 About", " An Organic R Textbook Ian Cero, PhD MStat 2021 1 About This is textbook created during live discussion with the Squeglia Research Group of the Medical University of South Carolina. Use the index on the left to navigate from topic to topic. "],["getting-started.html", "2 Getting Started 2.1 Overview of the R ecosystem 2.2 Installation 2.3 A tour of RStudio 2.4 Your very first analysis", " 2 Getting Started Under most circumstances, getting started with R is a straightforward process of downloading and installing a few components. In what follows, well talk about what those components are, and the order in which youll want to install them. NOTE: the order of installation matters, so please be careful to follow the instructions in the order given below. 2.1 Overview of the R ecosystem Most of the time you are using R for data analysis, youll want to remember that you are working with a whole ecosystem of analysis tools. Understanding the different roles these tools serve in your project will help you keep track of the best way to use them - and hopefully make your R experience more intuitive. The R ecosystem youll be using for data analysis generally consists of three parts: The R language, which is a coding language (like Java or Python) that was optimized for talking to computers about statistical problems. When you download and install R (step 1, below), you are teaching your computer how to speak that R language. The RStudio Integrated Development Environment (IDE) is a program that you will use to make it easier to talk to your computer in the R language. Think of R as a language and RStudio as a chat app that has a bunch of features (e.g., your contacts list, spell check) that make the chat experience faster and easier for you. R Packages are collections of code that other people have written to make R perform particular tasks, usually around a them. For example, there are packages for making R perform new types of analyses, but also for streamlining data cleaning. You can download these packages with Rs install.packages() command, so that your computer can use them too. Think of packages like special tricks you are teaching your computer. Once it learns the trick (i.e., installs the package) it can do that new trick with R over and over again, making youre live a lot easier. 2.2 Installation 2.2.1 Step 1 - Download and install the R language The first step to a functioning R ecosystem on your computer is to install the R language on your computer. Its freely available at the Comprehensive R Archive Network (CRAN), which is an acronym youll see a lot as we go forward. CRAN is just a group of programmers in charge of maintaining and updating the R language. To install R, go to https://cran.r-project.org/. Then at the very top of the page, choose the installer that is right for your operating system (i.e., Windows, macOS, Linux). HINT: Depending on your operating system, the downloads page can be kind of intimidating. What you are looking for is the most updated version of R, which as of today (2021-12-01) is R 4.1.2. If you find that you want something to take you through the process at a more step-by-step pace, this tutorial (https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu) should have an answer for each operating system. Figure 2.1: https://cran.r-project.org/ 2.2.2 Step 2 - Download and install the RStudio IDE Several years ago, writing code in R was especially difficult because there was so much to keep track of and it was all hidden behind the code. The RStudio IDE fixed that for us by allowing us to continue coding in R, but this time with a collection of useful windows that keep track of whats happening in our code (e.g., what datasets do we have loaded? what plots have we generated?). After you installed R, installing the RStudio IDE should be fairly straightforward. Just go to their Downloads page (https://www.rstudio.com/products/rstudio/download/) and choose the Desktop Version Figure 2.2: https://www.rstudio.com/products/rstudio/download/ NOTE: make sure you finish step 1 first! This will allow you to save several steps linking R and RStudio. This is because if R is installed first, RStudio will do the linking for you automatically. 2.2.3 Step 3 - Install the tidyverse package (optional) Now that both R and RStudio are installed, lets open RStudio and install some packages. Once you have Rstudio open, you should see several windows. Find the Console window. Inside that window, type install.packages('tidyverse') and press ENTER. R is case-sensitive, so make sure to type (or copy/paste) the command exactly. This should start an installation process that takes a few minutes (no more than 10) and will install a package you will use basically every time you program in R - so its very useful to have. If you get an error message while installing, dont worry! Thats pretty common and youve probably still done everything right. Just remind me in class and we will make sure to troubleshoot it for you. Figure 2.3: The RStudio IDE 2.3 A tour of RStudio If R is a language, RStudio is a chat program that makes it easier to talk to your computer using that language. It includes multiple windows that help you keep track of the different parts of the conversation. Although there are lots of tabs scattered throughout the overal RStudio application, there are generally 3 that we will use every day. 2.3.1 The console Shown in the left half (or sometimes lower left quarter) of the screen. The console is where you can talk to R live. Everything you enter into the console happens right away, which makes it really useful for quick calculations. 2.3.2 The environment The Environment tab in the top right quadrant shows you every object you currently have imported into R. This is especially useful for keeping track of what you named your datasets (and whether your datasets even made it into R in the first place). 2.3.3 The lower right pane There are many tabs in the lower right pane and youll use most of them on a daily basis. The files tab shows you all the files in your current working directory (the file that R is paying attention to right now). The plots pane shows your plots, assuming you havent told R to send them somewhere else. Lastly, the help pane will show you Rs (very useful) help documentation, anytime you put a ? in front of a command (e.g., ?lm() brings up the help file for the lm() command). Figure 2.4: The RStudio IDE 2.4 Your very first analysis To give us a roadmap for our future work in R, well start with a basic analysis here. For demonstration purposes, well be doing a basic analysis of red wine and checking whether its chemical properties predict how well its rated by professional tasters. 2.4.1 Step 1 - download the data The first step is simply to download the data, which can be downloaded here. You might be asked to create a Kaggle account or to log in with Google. Dont worry though, its totally free. 2.4.2 Step 2 - Make an RStudio Project Now that we have our data, we need a place to store it - along with all the other important things well be working on, like our code and analysis output. The best option is to create an RStudio Project, which is a special kind of folder that RStudio knows to keep track of. RStudio projects have a number of advantages, but for now all you need to know is that they make it easier to keep track of your data. To make a project Navigate to File &gt;&gt; New Project (sometimes this takes a few seconds to load after you click on it) Select New Directory Select New Project In the Directory Name text box, write the name for your project. In this case, a good name might be something like Red Wine Practice. Note, you can change the directory you want your project folder too, but its not necessary for this example. Leave all the remaining boxes (Create git repository, Use renv with this project) unchecked. Click Create Project With your project now created, you should now see Red Wine Practice (or whatever you named your project in the top of your RStudio application window). Moreover, if you look to the Files pane on the lower right, you should see a file called Red Wine Practice.Rproj. Lastly, you should notice that your working directory is now called Red Wine Practice. You can double-check this by typing getwd() (short for get working directory) into the R Console on the bottom left and hit ENTER. 2.4.3 Step 3 - Get the data into your project folder The quickest way to get your data into your project folder, is simply to copy/paste the winequality-red.csv you downloaded in Step 1 into your Red Wine Practice folder. Where is that practice folder? Again, you can get the full path for your project folder simply by typing getwd() into the R console on the lower left and hitting ENTER. To check whether your copy/paste operation worked, your can type list.files() into the R console. If it worked, you should see it listed along with your Red Wine Practice.Rproj Figure 2.5: Checking the copy/paste operation worked with list.files() 2.4.4 Step 4 - Open an Rmarkdown Notebook We need a place to type our R commands, plus some notes to ourselves. The best way to do both of those things at the same time as an Rmarkdown notebook. Navigate to File &gt;&gt; New file &gt;&gt; R Notebook NOTE: You might get a message asking if you want to install some packages. Press OK / Yes - you do want to install them. With the new notebook file opened, press CTRL+S to save the file under a different name. You can use whatever name you want. For this example, I will use main.Rmd to remind myself this is my main analysis file. Inside your newly saved file, change the title from R Notebook to something more descriptive like My first wine analysis. Lastly, RStudio gave us a bunch of boilerplate code. We wont need that today, so delete everything below the second --- at the top of the page, right under output: html_notebook. Your final document should then look something like the following. Figure 2.6: What your Rmarkdown file should look like before we start coding 2.4.5 Step 5 - Create a space to code Rmarkdown documents have whitespace and greyspace. Whitespace is where you type notes to yourself. Greyspace is where you type R commands. We call these greyspaces code blocks. Anywhere below line 4, type a note to yourself like This is where I imported the data. Move your curser to a line below that note you just wrote (e.g., line 8). Then, press CTRL+ALT+I. This will create a grey codeblock. Figure 2.7: Adding a note to yourself and a grey code block 2.4.6 Step 6 - Write a command to import the data Importing data involves four things: the name of the datafile, a command to read the data into R, the assignment operator (written as &lt;-), and the name you want R to call the imported data when you reference it later. Fortunately, this sounds much more complicated than it is. For now, just copy and paste the following commmand into the middle of your grey code block (for me, that is line 9). my_data &lt;- read.csv(&#39;winequality-red.csv&#39;) This is R code. It can be translated into English, but its a little clunky. Also, generally code works from right to left. So, you would read this sentence as something like Take the file called winequality-red.csv, read it into R, then call whatever comes out of that process my_data. To get the R code to run, put your cursor inside the grey code block and press CTRL+SHIFT+ENTER. This runs all the code inside that block. 2.4.7 Step 7 - Look inside the data Make a new code block a few lines down from the last one. Then type just the name of your imported data and run the block. You should see a preview of your dataset. To scroll through the other variables in the dataset, press the right-facing triangle on the right side of the preview. Figure 2.8: Preview of the data 2.4.8 Step 8 - Make a histogram I think Im most interested in the final variable in the dataset, quality. In this case, that is the quality of the wine - rated by professionals on a scale of 1 to 10. Lets see what the distribution looks like. For that we can use the hist() command (short for histogram). But what should we give our hist() command? We unfortunately cant give it the whole dataset. After all, we only want a histogram of one variable. How do we specify that variable? We use the selection operator, which we write as a $-symbol, like below. hist(my_data$quality) Figure 2.9: Histogram of wine quality ratings 2.4.9 Step 9 - Run a regression Now that we have a sense of what our outcome variable (quality) looks like, lets see if we can investigate some of the chemical characteristics in wine associated with that outcome. The ones that stick out to me are pH (acidity) and alcohol content because they seem like things that would really affect the taste. Lets use those as our predictors To run a regression, we need just a few things (out of order): - The lm() command, which is short for linear model. This is how R will know we want a regression. - Our data, named my_data - A regression formula, which tells R what the outcome variable and its predictors are - The assignment operator again (&lt;-), which tells us where to store the results - A name for where to store the results Putting all of that together looks like this. One you have it all typed in (or copy/pasted), run the whole block with CTRL+SHIFT+ENTER. my_results &lt;- lm( formula = quality ~ pH + alcohol, data = my_data) 2.4.10 Step 10 - Get a summary of your results You may have noticed that in Step 9, your results didnt show up anywhere after you ran your regression. Thats because R stored them in my_results, just like it stored the outcome of the read.csv() command in my_data. This often surprises people who come from other software packages, but thats okay. Our results are still easy to get. We just need to ask R for a summary of them. summary(my_results) ## ## Call: ## lm(formula = quality ~ pH + alcohol, data = my_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.7153 -0.4066 -0.1105 0.5076 2.4584 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.42581 0.38742 11.424 &lt; 2e-16 *** ## pH -0.85011 0.11571 -7.347 3.23e-13 *** ## alcohol 0.38617 0.01676 23.036 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6989 on 1596 degrees of freedom ## Multiple R-squared: 0.252, Adjusted R-squared: 0.2511 ## F-statistic: 268.9 on 2 and 1596 DF, p-value: &lt; 2.2e-16 This gives us a basic regression table with all of the same information you are used to. Under the Coefficients heading, we see the b-values / slopes (Estimate column), their standard errors, t-values, and p-values. Next to the p-values, we see stars reminding us that our p-values are significant at the &lt; .001 level. In fact, our p-values are so small, they have to be shown in scientific notation (3.23e-13). These can be treated as basically zero. Lastly, at the very bottom, we also see the usual R-squared values (here, .252), our F-statistic, and degrees of freedom - everything we need to create a publication-ready regression table. 2.4.11 A Look forward Over the last 10 steps, we ran through a basic version of essentially every R analysis you are likely to conduct in the future. This is example thus contains a useful workflow you will likely want to recreate in your future work: Create a project to store everything Import the data Visualize / explore the data Run main analysis model Summarize results Although the data and models you use might be more complicated as your time in R progresses, its helpful to remember that everything your are doing typically reduces to these fundamental steps. "],["basic-r.html", "3 Basic R 3.1 Writing in R and Rmarkdown 3.2 Variables 3.3 Vectors 3.4 Lists 3.5 Dataframes 3.6 Functions 3.7 Packages 3.8 Error messages 3.9 Coding Conventions", " 3 Basic R 3.1 Writing in R and Rmarkdown 3.1.1 Chatting with R Using R is just a chat with the computer. Hey, R. What is \\(1 + 2\\)? 1 + 2 ## [1] 3 3.1.2 Rmarkdown tricks To make text bold, we add two **s around it. To make text italicized, we add just one * around it. If we need special characters (like * or $), then we just add a forward \\ in front of them (but not behind). Math symbols in your text are process with Latex, just put an $ before and after your math. Like this, $y = x$ becomes \\(y = x\\). 3.1.3 Code blocks To make a code block, press CTRL+ALT+I. banana &lt;- 5 banana + 1 ## [1] 6 3.2 Variables Variables are values that I want to give names to and save for later. 3.2.1 The assignment operator We make variables with the &lt;- operator. This is called the assignment operator because it assigns values on the right to names on the left. If I want to know what the value of a variable is, I can run it alone on its own line. my_special_var &lt;- 1 + 2 my_special_var ## [1] 3 You can TECHNICALLY use = for assignment too. Never do this. my_other_var = 12 my_other_var + my_special_var ## [1] 15 The = symbol gets also used for a few other things in R. So, using it to assign variables will make your code more confusing to you, when you go back to read it over later. 3.2.2 Numerics Doubles Doubles are decimal numbers, like \\(1.1, 2.2, 3.0\\). If I make a number variable without doing anything special, R defaults to a double. a &lt;- 1.1 b &lt;- 2.0 is.double(a) ## [1] TRUE is.double(b) ## [1] TRUE Integers Integers must have an L after them. That is how R knows that you dont want a double, but instead want a long-capable integer. c &lt;- 1L d &lt;- 1 is.integer(c) ## [1] TRUE is.integer(d) ## [1] FALSE Here is a useful cheatsheet for the different numeric operators and how they behave. Operator Expression Result + 10 + 3 13 - 10 - 3 7 * 10 * 3 30 / 10 / 3 3.333 ^ 10 ^ 3 1000 %/% 10 %/% 3 3 %% 10 %% 3 1 Why care about the difference? Almost 99% of the time, this wont matter. But, with big data, integers take up must less memory. my_integers &lt;- seq(from = 1L, to = 1e6L, by = 1L) my_doubles &lt;- seq(from = 1.0, to = 1e6, by = 1.0) object.size(my_integers) ## 4000048 bytes object.size(my_doubles) ## 8000048 bytes Note here that although we are using only whole numbers from 1 to 1 million, the first sequence (my_integers) is stored as an integer and the second sequence (my_doubles) is stored as a number that may include decimals. This second case needs more space (twice as much) to be allocated in advance, even if we never use those decimal places. Again, this will almost never matter for most people, most of the time. However, it is good to be aware of for when your datasets get large (i.e., several million cases or more). 3.2.3 Characters Characters are text symbols and they are made with either \"\" or '', either works. a &lt;- &#39;here is someone\\&#39;s text&#39; b &lt;- &quot;here is more text&quot; a ## [1] &quot;here is someone&#39;s text&quot; b ## [1] &quot;here is more text&quot; To combine two strings, I use paste(). paste(a, b) ## [1] &quot;here is someone&#39;s text here is more text&quot; If I dont want a space, then I used paste0(). paste0(a, b) ## [1] &quot;here is someone&#39;s texthere is more text&quot; 3.2.4 Booleans These are True and False values. You make them with the symbols T or TRUE and F or FALSE. x &lt;- T y &lt;- F To compare them, we can use three operators. &amp; is and | is or ! is not (just give me the opposite of whatever is after me) x &amp; y # false ## [1] FALSE x | y # true ## [1] TRUE x &amp; !y # true ## [1] TRUE We can also have nested equations z &lt;- F x &amp; !(y | z) # true ## [1] TRUE We can also compare numbers. a &lt;- 1 b &lt;- 2 a &lt; 1 ## [1] FALSE a &lt;= 1 ## [1] TRUE a == 1 ## [1] TRUE If I want to compare multiple numbers, I need to do it seperately. (a &gt; 1) | (b &gt; 1) ## [1] TRUE Remember that booleans are ultimately numeric values underneath. d &lt;- T k &lt;- F u &lt;- 5 d*u ## [1] 5 d*k ## [1] 0 as.numeric(d) ## [1] 1 as.numeric(k) ## [1] 0 3.2.5 Special types NA - missing is.na(NA) ## [1] TRUE NaN - you did math wrong 0/0 ## [1] NaN Inf - infinity -5/0 ## [1] -Inf 3.3 Vectors R is built is on vectors. Vectors are collections of a bunch of values of the same type. my_vec &lt;- c(1, 5, 3, 7) my_vec ## [1] 1 5 3 7 If I try to put different types together, they go to the most primitive type (usually a character string). my_other_vec &lt;- c(22, &#39;orange&#39;, T) my_other_vec ## [1] &quot;22&quot; &quot;orange&quot; &quot;TRUE&quot; my_third_vec &lt;- c(T, F, 35) my_third_vec ## [1] 1 0 35 We can also missing values. my_fourth_vec &lt;- c(1, 4, 5, NA) my_fourth_vec ## [1] 1 4 5 NA is.na(my_fourth_vec) ## [1] FALSE FALSE FALSE TRUE If I want to combine two vectors a &lt;- c(1, 2, 3) b &lt;- c(3, 5, 7) c(a, b) ## [1] 1 2 3 3 5 7 A brief example of matrices matrix( data = c(a, b), nrow = 2, byrow = T) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 3 5 7 Sometimes I want special vectors, direct sequences of numbers. There are two ways to do this. If all I want is a integer sequence (made of doubles), then I use the &lt;first number&gt;:&lt;last number&gt;. 1:5 ## [1] 1 2 3 4 5 5:1 ## [1] 5 4 3 2 1 Other times, I need to count by something other than one, so I use seq(from = &lt;start&gt;, to = &lt;end&gt;, by = &lt;number to count by&gt;) seq(from = 1, to = 7, by = 1.3) ## [1] 1.0 2.3 3.6 4.9 6.2 Hint: for brevity, I can leave off function parameter names, as long as I enter them in order seq(1, 7, by = 1.3) ## [1] 1.0 2.3 3.6 4.9 6.2 If I add a constant to a vector, then they all go up by that constant. 1:5 / 3 ## [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 I can do math with equal-length sequences too. 1:5 - seq(1, 4, by = .7) ## [1] 0.0 0.3 0.6 0.9 1.2 But they must be equal lengths. 1:5 / 1:4 ## Warning in 1:5/1:4: longer object length is not a multiple of shorter object length ## [1] 1 1 1 1 5 To access the elements of a vector, I put a number OR booleans in brackets []. my_vec &lt;- c(&#39;apple&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;pair&#39;) my_vec[2] ## [1] &quot;orange&quot; my_vec[2:4] ## [1] &quot;orange&quot; &quot;banana&quot; &quot;pair&quot; my_vec[c(3, 2, 1, 4)] ## [1] &quot;banana&quot; &quot;orange&quot; &quot;apple&quot; &quot;pair&quot; I can also use bools. my_other_vec &lt;- c(1, 4, 6, 7, 9, 3, 9) my_other_vec &lt; 5 ## [1] TRUE TRUE FALSE FALSE FALSE TRUE FALSE my_other_vec[my_other_vec &lt; 5] ## [1] 1 4 3 I can also use functions that return values to access vectors, if I am creative my_other_vec[max(my_other_vec) == my_other_vec] ## [1] 9 9 R also has special vectors that are pre-loaded. The most commonly used are letters and LETTERS, which return the lower-case letters and uppercase letters of the English alphabet, respectively. vec &lt;- c(1, 3, 4, 5, 3, 2, NA) mean(vec, na.rm = T) ## [1] 3 3.4 Lists &lt;&lt; More on lists to come &gt;&gt; Lists are special vectors that can hold multiple types of elements, even vectors my_vec &lt;- c(4, 5, 6) my_list &lt;- list(1, &#39;banana&#39;, 3, NA, my_vec) my_list ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;banana&quot; ## ## [[3]] ## [1] 3 ## ## [[4]] ## [1] NA ## ## [[5]] ## [1] 4 5 6 3.5 Dataframes 3.5.1 Construction Dataframes are spreadsheets. Under the hood of R, they are just lists of vectors, where all the vectors are required to be the same length. To make one, you can call the data.frame() function and put your vectors inside. heights &lt;- c(60, 65, 71, 72, 64) sexes &lt;- c(&#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;) shoes &lt;- c(&#39;Adidas&#39;, &#39;Nike&#39;, &#39;Nike&#39;, &#39;Salvatore Ferragamo&#39;, &#39;Reebok&#39;) df &lt;- data.frame(height = heights, sex = sexes, shoes = shoes) df ## height sex shoes ## 1 60 female Adidas ## 2 65 female Nike ## 3 71 male Nike ## 4 72 male Salvatore Ferragamo ## 5 64 female Reebok 3.5.2 Built-in dataframes R has numerous built-in datasets that are ideal for demonstration purposes. We can get access to them using the data() command. This will load the data into our session, so we can then look at it. data(&#39;mtcars&#39;) mtcars ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 Some datasets do not come in the form of a dataframe right away, but they can be converted into one using the as.data.frame() function. data(Seatbelts) is.data.frame(Seatbelts) ## [1] FALSE seatbelts_df &lt;- as.data.frame(Seatbelts) is.data.frame(seatbelts_df) ## [1] TRUE 3.6 Functions A function is a piece of code that does work for you. It takes inputs and (usually) returns outputs. For example, the sum() function takes the sum of a numeric vector. my_vec &lt;- c(3, 6, 2, 3) sum(my_vec) ## [1] 14 3.6.1 Getting help If I ever need to know something about a function, I can put a question mark in front of it (no ()s) and run that line. That will bring up the help document for that function. ?sum 3.6.2 Function parameters In addition to the data they take as input, most functions have additional parameters (sometimes called arguments, but they mean the same thing). Looking at its help file, the sum() function has two parameters: ..., the numbers you want to sum na.rm = FALSE, which tells sum() whether you want to remove (rm) missing values (na) before summing. Lets look at what happens when we try to sum() a vector with a missing value. my_vec &lt;- c(5, NA, 2, 3) # should be 10 sum(my_vec) ## [1] NA R tells us the answer is missing (NA) because at least one of the vector elements is missing. This is to be conservative and to force you never to ignore missing values by accident. But what do we do if we really do want to sum all available values, ignoring the missing values. Again, looking at the help file, we can see that the na.rm parameter of the function is followed by = FALSE, under the Usage heading of that help document (look for sum(..., na.rm = FALSE)). This tells us that the parameter na.rm, which tells sum() whether to remove missing values from the calulation, defaults to FALSE. To get sum() to ignore the missing values in our vector, we simply set na.rm to TRUE (or T for short). sum(my_vec, na.rm = T) # should be 10 ## [1] 10 3.7 Packages Packages are collections of functions that someone else put together for you. You can install them using the install.packages() function, with the name of your package inside the () - dont forget to use either single (' ') or double quotes (\" \") around the package name too. install.packages(&#39;ggplot2&#39;) Once installed, use the library() function to load your package into your R session. Note, you dont need quotes here. library(ggplot2) 3.8 Error messages Whenever R detects that something has gone wrong, it will send you an error message in the form of some scary-looking red text. &#39;100&#39; / &#39;2&#39; # trying to divide two strings ## Error in &quot;100&quot;/&quot;2&quot;: non-numeric argument to binary operator Unfortunately, R is not especially smart and is usually bad at detecting exactly WHAT has gone wrong. In this case, all it knows is that / needs two numbers - one on either side - to work correctly. It detected something other than that, which is what it told us: there was a non-numeric argument (input) SOMEWHERE on either side of the / symbol. Stumbling on an error and getting stuck is especially common. Its also common to get frustrated when you are stuck with the same error for more than a few minutes. For that reason, if you cant solve an error after a few quick tries, its best NOT to beat your head against the wall. Instead, go to a place like https://stackoverflow.com/, which is a website devoted entirely to answering questions - most of which are about coding errors just like yours. Simply copy and paste your error into the search box and look for someone who asked your question already. Youll notice that many people have had your same problem and have even produced some code you can copy/paste to fix your current issue. 3.9 Coding Conventions R is a language, much like English or Spanish. It sometimes has rules for how you MUST say something in order for your computer to understand at all. For example, R wont let you add a number and a letter together because that wouldnt make sense mathematically. 1 + &#39;a&#39; ## Error in 1 + &quot;a&quot;: non-numeric argument to binary operator Other times, R will let you do the same thing in more than one way. For example, I can name my variables with a mixture of capitals and lower-case letters. apple &lt;- 123 BANANANA &lt;- 456 ClEmEnTiNe &lt;- 789 Some of these options might be more confusing than others, but R will technically let you do them. Other examples include using &lt;- or = to assign values to variables. As discussed above, both with work. peas &lt;- &#39;tasty&#39; carrots = &#39;also tasty&#39; 3.9.1 What should my code look like? Whenever there are multiple options for how to code, its worth thinking about whether one will be better for you than the others. If you come up with a consistent rule over time - like never use capital letters in function names - youve developed some coding conventions. These achieve a few things for you, but mostly we develop these informal language rules for clarity. They make it easier for us to read our code, and for others to understand what we were doing when they look at our code later. Some common coding conventions most R users now employ are given below. 3.9.1.1 Common coding conventions in R Never use = to assign variable values. Use the &lt;- operator instead because it is more clear. a = 2 # bad a &lt;- 2 # good Avoid using . to seperate words in your variable and function names because this makes it hard for people who come from other coding langauages to understand us. Use _ instead. my.favorite.number &lt;- 3.14159 # bad my_favorite_number &lt;- 3.14159 # good Whenever possible, stick to lower-case variable names. It will make it easier for you to reference your variables later, without accidentally making a capitalization error. apple &lt;- 123 # good BANANANA &lt;- 456 # bad ClEmEnTiNe &lt;- 789 # bad Whenever possible, try to use single-quotes (') for character strings, rather than double quotes (\"). Single quotes are easier on your eyes when you are looking at a page full of code. peas &lt;- &quot;tasty&quot; # bad carrots = &#39;also tasty&#39; # good 3.9.2 Official coding conventions Coding conventions are so important, that many people have tried to publish some. You can think of these like stlye guides that many people agreed to use. The one most relevant to our own work here is Hadley Wickhams guide at https://style.tidyverse.org/. "],["strings-should-you-care.html", "4 Strings, should you care? 4.1 A recurring example 4.2 Join the datasets 4.3 Extract some information 4.4 Phone numbers 4.5 String interpolation", " 4 Strings, should you care? When it comes to learning R, there are two topics that almost no one ever asks for, but they still often appreciate having after the fact. The first of these is string manipulation. Here, we show off some of Rs text manipulation abilities. If you see something you like, feel free to incorporate it. 4.1 A recurring example Throughout this exercise, well imagine we have an ongoing research study with multiple sources of important information: A contact_df, which includes identifying contact information about the subjects in our study, some of which we need for administrative purposes, but some of which we also need for analysis (e.g., birth dates to calculate age, which will be used as a covariate in a regression.). A mood_df, which contains the substantive information the study is about, including a mood score. Because each dataset only includes three people, they are easy to take a glance at below. library(tidyverse) contact_df &lt;- read_csv(&#39;data/contact_info.csv&#39;) ## Rows: 3 Columns: 11 ## -- Column specification --------------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (8): form_1_timestamp, fname, lname, phone, address, tax_day, tax_day_wish, ope... ## dbl (2): record_id, form_1_complete ## lgl (1): redcap_survey_identifier ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. mood_df &lt;- read_csv(&#39;data/mood_data.csv&#39;) ## Rows: 3 Columns: 3 ## -- Column specification --------------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (1): name ## dbl (2): age, mood_score ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. contact_df ## # A tibble: 3 x 11 ## record_id redcap_survey_identifier form_1_timestamp fname lname phone address tax_day ## &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 NA 4/14/2022 14:30 Ian Cero 314-~ 123 4t~ 4/23/2~ ## 2 2 NA 4/14/2022 14:32 Test McFa~ (567~ 456 5t~ 4/22/2~ ## 3 3 NA 4/14/2022 14:34 Exam~ McFa~ 4567~ 789 6t~ 4/12/2~ ## # ... with 3 more variables: tax_day_wish &lt;chr&gt;, open_ended &lt;chr&gt;, ## # form_1_complete &lt;dbl&gt; mood_df ## # A tibble: 3 x 3 ## name age mood_score ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 CERO, Ian 25 6 ## 2 MCFAKE, Test 26 9 ## 3 MCFAKE, Example 25 3 4.2 Join the datasets One of the first, most obvious things we want to do might be joining these two datasets. That should be easy because we have names in both of them. But wait! The names arent formatted in the same way. In the mood dataset, they are formatted like CERO, Ian, but in the contact dataset, they are formatted with two seperate variables: fname = Ian, lname = Cero. All of the joining operations we know require that at least one column is identical across the datasets. Thats how we know which scores to link. To solve this, we can simply create a new name variable in the contact dataframe, using paste() and toupper(). Now, we will have a column with identical formatting in each dataframe. contact_df &lt;- contact_df %&gt;% mutate( name = paste(toupper(lname), fname, sep = &#39;, &#39;)) contact_df &lt;- contact_df %&gt;% left_join(mood_df, by = &#39;name&#39;) 4.2.1 Direction / order of operations Can we go the other way around, from mood to contact? Yes, but takes more work, as you can see below. This is an important lesson about Rs string functions: there is typically more than one way to solve a problem, but they are not all equally valuable. Sometimes, one is much harder than the others. mood_df &lt;- mood_df %&gt;% mutate( lname = str_extract(name, &#39;\\\\w+&#39;) %&gt;% tolower() %&gt;% tools::toTitleCase() %&gt;% str_replace(&#39;Mcf&#39;, &#39;McF&#39;), fname = str_extract(name, &#39;, \\\\w+&#39;) %&gt;% str_remove(&#39;, &#39;)) mood_df %&gt;% left_join(contact_df, by = c(&#39;fname&#39;, &#39;lname&#39;)) ## # A tibble: 3 x 17 ## name.x age.x mood_score.x lname fname record_id redcap_survey_id~ form_1_timestamp ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; ## 1 CERO, I~ 25 6 Cero Ian 1 NA 4/14/2022 14:30 ## 2 MCFAKE,~ 26 9 McFake Test 2 NA 4/14/2022 14:32 ## 3 MCFAKE,~ 25 3 McFake Exam~ 3 NA 4/14/2022 14:34 ## # ... with 9 more variables: phone &lt;chr&gt;, address &lt;chr&gt;, tax_day &lt;chr&gt;, ## # tax_day_wish &lt;chr&gt;, open_ended &lt;chr&gt;, form_1_complete &lt;dbl&gt;, name.y &lt;chr&gt;, ## # age.y &lt;dbl&gt;, mood_score.y &lt;dbl&gt; 4.3 Extract some information Often, a column in a spreadsheet holds many pieces of information and we need just one specific piece. For example, a persons address has much information about their location, but the zipcode is typically most useful for statistical analysis because we can associate it withe median income. The problem comes in when we need just that one piece of information in a new column. Again, R comes to the rescue, this time with the str_extract() function, which takes two arguments: the text we want to grab something from, and the pattern of things we want to extract. In this case, the pattern '[0-9]+$' tells R to grab any digit from 0-9. The + says that it needs to be an unbroken sequence of digits and the $ says it must come at the end of the main text, which is where zipcodes are always located. contact_df %&gt;% mutate( zip = str_extract(address, &#39;[0-9]+$&#39;)) %&gt;% select(address, zip) ## # A tibble: 3 x 2 ## address zip ## &lt;chr&gt; &lt;chr&gt; ## 1 123 4th St S Appleton, MI 67890 67890 ## 2 456 5th St Appleton, MI 67890 67890 ## 3 789 6th St Appleton, MI 67890 67890 4.4 Phone numbers When you ask a research subject, they can give you a valid phone number in a variety of different ways: (123) 456-7890, 123-456-7890, 1234567890, and so on. This can make working with them complicated. Technically, all we need from a phone number is the numbers. We could use str_extract() for that, but to demonstrate another approach, lets use str_replace_all() this time. Here, we tell R that we want to replace anything in phone that is NOT a digit (the ^ symbol means not) with '' (an empty string / nothing). contact_df %&gt;% mutate( formatted_phone = str_replace_all(phone, &#39;[^0-9]&#39;, &#39;&#39;)) %&gt;% select(phone, formatted_phone) ## # A tibble: 3 x 2 ## phone formatted_phone ## &lt;chr&gt; &lt;chr&gt; ## 1 314-159-1234 3141591234 ## 2 (567) 123-5876 5671235876 ## 3 4567890123 4567890123 They may not be pretty, but now all of our phone numbers are formatted in exactly the same way. This makes it easy to run subsequent manipulation tasks on them, like checking for duplicates. 4.4.1 What about using str_extract_all() As we mentioned above, there are typically many ways to do the same process with strings, but one or the other often takes more work. In case you are interested, here is the process for extracting a phone number with str_extract_all(). The reason it is more complicated in this case is because that function returns a list() object, which means you need to wrap it in map() to play nice, then unlist and collapse it. contact_df %&gt;% mutate( formatted_phone = map_chr( .x = phone, .f = ~ str_extract_all(.x, &#39;[0-9]+&#39;) %&gt;% unlist() %&gt;% paste(collapse = &#39;&#39;))) %&gt;% select(phone, formatted_phone) ## # A tibble: 3 x 2 ## phone formatted_phone ## &lt;chr&gt; &lt;chr&gt; ## 1 314-159-1234 3141591234 ## 2 (567) 123-5876 5671235876 ## 3 4567890123 4567890123 4.5 String interpolation For basic tasks, the family of str_...() functions are great. But what if I want to do something more complicated, like compose a letter. As a dmeonstration, our contact dataframe includes the date taxes were due, but also the days taxes were paid. What if we wanted to produce a message for everyone that included their last name, as well as the number of days late their taxes were. Enter glue and string interpolation. This powerful tool lets us write out our template string, then use {} to refer to a variable that will be injected (interpolated) into that string, like so. library(glue) ## Warning: package &#39;glue&#39; was built under R version 4.1.3 me &lt;- &#39;Ian&#39; glue(&#39;My name is {me}&#39;) ## My name is Ian We can use this knowledge to create individual messages for each person in our dataframe. contact_df %&gt;% mutate( tax_date = lubridate::mdy(tax_day), days_late = tax_date - as.Date(&#39;2022-04-18&#39;)) %&gt;% filter(days_late &gt; 0) %&gt;% mutate(message = glue(&#39;Dear Mr. {lname}, your taxes are {days_late} days late.&#39;)) %&gt;% select(lname, message) ## # A tibble: 2 x 2 ## lname message ## &lt;chr&gt; &lt;glue&gt; ## 1 Cero Dear Mr. Cero, your taxes are 5 days late. ## 2 McFake Dear Mr. McFake, your taxes are 4 days late. You can also do it with as many variables as you like. data.frame(id = 1:3) %&gt;% mutate( name = c(&#39;Ian&#39;, &#39;Jen&#39;, &#39;Andy&#39;), job = c(&#39;statistician&#39;, &#39;writer&#39;, &#39;researcher&#39;), pronouns = c(&#39;He&#39;, &#39;She&#39;, &#39;They&#39;), verb = ifelse(pronouns == &#39;They&#39;, &#39;are&#39;, &#39;is&#39;), bio = glue(&#39;This is {name}. {pronouns} {verb} a {job}.&#39;)) %&gt;% select(bio) ## bio ## 1 This is Ian. He is a statistician. ## 2 This is Jen. She is a writer. ## 3 This is Andy. They are a researcher. "],["simulations.html", "5 Simulations 5.1 Generating fake data 5.2 How is this useful? 5.3 Re-testing the t-test", " 5 Simulations If strings are the main feature of R that people didnt realize they needed, simulation techniques are the 2nd. Many people start out saying they are a little intimidated by simulations, but end up feeling comfortable after a little bit of practice. The initial discomfort usually comes from the fact that we are doing statistics in reverse. In statistical analysis, we feed the data to a fitting function (like lm()) in order to get parameter estimates. In contrast, in simulations we are studying how well those functions recover parameters, so we choose some parameter values ourselves, make data that are consistent with those parameters, then apply our fitting function to see how well it guessed the parameters we planted in our data. 5.1 Generating fake data To get started, the first thing you need to know is how to generate fake random data. Fortunately, R has many functions for this, which generally start with r... for random. For example, to make a random normal variable, you would call rnorm, which takes 3 arguments: n, the number of numbers you want to generate mean, the mean of the population you want to be drawing from sd, the standard deviation of the population you want to be drawing from my_normals &lt;- rnorm(n = 100, mean = 11, sd = 3) hist(my_normals) Looking at the graph, we got just about what we would have expected. Will things get even more normal looking with a larger sample size? Definitely. my_normals &lt;- rnorm(n = 10000, mean = 11, sd = 3) hist(my_normals) 5.2 How is this useful? On their own, random numbers are useless. However, if we use them to make many fake datasets, we can apply the same analysis function to each dataset and keep track of the results. This allows us to ask questions like how often was an effect significant? (i.e., power). For example, lets look at the power of a t-test. R tells us that if we use the formula, the power of a t-test with a true effect size of d = .30 and a sample size of n = 150 in each group, we have a power of about .73 pwr::pwr.t.test(n = 150, d = .30) ## ## Two-sample t test power calculation ## ## n = 150 ## d = 0.3 ## sig.level = 0.05 ## power = 0.7355674 ## alternative = two.sided ## ## NOTE: n is number in *each* group Lets make our own data and see if that holds when we try to simulate it. 5.3 Re-testing the t-test To simulate several datasets, we need just a few ingredients. First, we need a dataframe that is set up to represent many datasets. We can use expand_grid() for this. With the following commands, it will make 1000 samples, each with two groups (0, 1), and each of those groups will contain 150 people. many_datasets &lt;- expand_grid(sample = 1:1000, group = 0:1, person_id = 1:150) head(many_datasets) ## # A tibble: 6 x 3 ## sample group person_id ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 0 1 ## 2 1 0 2 ## 3 1 0 3 ## 4 1 0 4 ## 5 1 0 5 ## 6 1 0 6 Now, lets put some information in those groups. Well give group 0 a mean of 0 and group 1 a mean of .30. Assuming they both have a standard deviation of 1.0, this works out to a group difference of Cohens d = .30. many_datasets &lt;- many_datasets %&gt;% mutate( score = ifelse( test = group == 0, yes = rnorm(n(), mean = 0, sd = 1), no = rnorm(n(), mean = .30, sd = 1))) head(many_datasets) ## # A tibble: 6 x 4 ## sample group person_id score ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 0 1 0.0418 ## 2 1 0 2 -1.50 ## 3 1 0 3 -0.799 ## 4 1 0 4 0.351 ## 5 1 0 5 -0.903 ## 6 1 0 6 -1.55 Now, lets conduct a t-test on each one and look at the results. many_datasets %&gt;% group_by(sample) %&gt;% nest() %&gt;% mutate( fit = map(data, ~ t.test(score ~ group, data = .x)), results = map(fit, ~ broom::tidy(.x))) %&gt;% unnest(results) %&gt;% ungroup() %&gt;% summarise(power = sum(p.value &lt; .05)/length(p.value)) ## # A tibble: 1 x 1 ## power ## &lt;dbl&gt; ## 1 0.724 Voila! Without doing any complicated calculus, we were able to calculate the power of a t-test - and pretty accurately too! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
