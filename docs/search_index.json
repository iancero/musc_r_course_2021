[["working-with-abcd.html", "4 Working with ABCD 4.1 Importing ABCD datafiles", " 4 Working with ABCD In this section, well add specific content for the ABCD dataset issues as we uncover them over time. 4.1 Importing ABCD datafiles One of the trickiest parts of working with the ABCD dataset is just getting the data into R. Under most circumstances, getting a file into R is as simple as loading the tidyverse and telling the read_csv() function where to look for your data. library(tidyverse) wine_df &lt;- read_csv(&#39;data/winequality-red.csv&#39;) head(wine_df) ## # A tibble: 6 x 12 ## `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides `free sulfur dioxide` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7.4 0.7 0 1.9 0.076 11 ## 2 7.8 0.88 0 2.6 0.098 25 ## 3 7.8 0.76 0.04 2.3 0.092 15 ## 4 11.2 0.28 0.56 1.9 0.075 17 ## 5 7.4 0.7 0 1.9 0.076 11 ## 6 7.4 0.66 0 1.8 0.075 13 ## # ... with 6 more variables: total sulfur dioxide &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, ## # alcohol &lt;dbl&gt;, quality &lt;dbl&gt; 4.1.1 Whats different about ABCD? There are a few things that are unique about ABCD datasets that make them a little bit harder to import than normal: They are tab-delimited, rather than comma delimited. This means that when they were being saved, the variables in the file were seperated by a tab (specifically, they were separated by the symbol \\t), rather than a comma (,). In principle, there is nothing wrong with this. It is just a little unusual and so we need to use a special import function to deal with it (specifically, read_delim(). The more complex problem is that ABCD datasets have - in an effort to be helpful - have variable names in the first row of data and variable descriptions in the second row. This confuses R, which is expecting the variable names to be in the first row only, then the data to start in the second row. 4.1.2 Walking through ABCD data importation Well do this in a few steps. If youre just looking to copy/paste the code, then skip to the end of this section. If youre looking for information about why we are doing what we are doing, then keep reading. First, notice that we need to use the read_delim() command, rather than the usual read_csv(). This tells R we are expecting a delimited file. We also tell that function we are expecting the delimeter to be a tab (delim = '\\t'), which we could figure out by opening the raw data in a basic text editor, like Notepad, and looking at it. abcd_df &lt;- read_delim(&#39;data/abcd_screen02.txt&#39;, delim = &#39;\\t&#39;) head(abcd_df) ## # A tibble: 6 x 41 ## collection_id abcd_screen02_id dataset_id subjectkey src_subject_id interview_date interview_age ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 collection_id abcd_screen02_id dataset_id The NDAR G~ Subject ID how~ Date on which ~ Age in month~ ## 2 2573 6579 47156 NDAR_INV0C~ NDAR_INV0CZBUV~ 07/19/2019 136 ## 3 2573 6581 47156 NDAR_INV0D~ NDAR_INV0D4C1R~ 03/10/2019 154 ## 4 2573 6588 47156 NDAR_INV0D~ NDAR_INV0DKWEM~ 11/30/2019 152 ## 5 2573 6594 47156 NDAR_INV0E~ NDAR_INV0E350J~ 12/16/2019 137 ## 6 2573 6609 47156 NDAR_INV0F~ NDAR_INV0FM9MU~ 11/27/2019 140 ## # ... with 34 more variables: sex &lt;chr&gt;, eventname &lt;chr&gt;, scrn2_select_language___1 &lt;chr&gt;, ## # scrn_braces_v2 &lt;chr&gt;, scrn_future_braces &lt;chr&gt;, scrn_bracesdate_v2 &lt;chr&gt;, ## # scrn_bracescallback_v2 &lt;chr&gt;, scrn_nr_hair_v2 &lt;chr&gt;, scrn_nr_hair_metal_v2 &lt;chr&gt;, ## # scrn_nr_hair_remove &lt;chr&gt;, scrn_nr_hair_date_v2 &lt;chr&gt;, scrn_nr_hair_callback_v2 &lt;chr&gt;, ## # scrn_eyeliner_v2 &lt;chr&gt;, scrn_nr_piercing_v2 &lt;chr&gt;, scrn_nr_piercing_remove &lt;chr&gt;, ## # scrn_nr_piercing_date &lt;chr&gt;, scrn_nr_piercing_callback &lt;chr&gt;, scrn_surgery_v2 &lt;chr&gt;, ## # scrn_height_v2 &lt;chr&gt;, scrn_weight_v2 &lt;chr&gt;, scrn_concerns &lt;chr&gt;, scrn_concerns_desc &lt;chr&gt;, ... We made some progress, but unfortunately, weve got these variable descriptors stuck in the top row of our data now. To get rid of them, we can re-assign the value of abcd_df to be a version of itself without its first row. abcd_df &lt;- abcd_df %&gt;% filter(row_number() != 1) head(abcd_df) ## # A tibble: 6 x 41 ## collection_id abcd_screen02_id dataset_id subjectkey src_subject_id interview_date interview_age ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2573 6579 47156 NDAR_INV0CZB~ NDAR_INV0CZBU~ 07/19/2019 136 ## 2 2573 6581 47156 NDAR_INV0D4C~ NDAR_INV0D4C1~ 03/10/2019 154 ## 3 2573 6588 47156 NDAR_INV0DKW~ NDAR_INV0DKWE~ 11/30/2019 152 ## 4 2573 6594 47156 NDAR_INV0E35~ NDAR_INV0E350~ 12/16/2019 137 ## 5 2573 6609 47156 NDAR_INV0FM9~ NDAR_INV0FM9M~ 11/27/2019 140 ## 6 2573 6630 47156 NDAR_INV0HFH~ NDAR_INV0HFHM~ 11/12/2020 152 ## # ... with 34 more variables: sex &lt;chr&gt;, eventname &lt;chr&gt;, scrn2_select_language___1 &lt;chr&gt;, ## # scrn_braces_v2 &lt;chr&gt;, scrn_future_braces &lt;chr&gt;, scrn_bracesdate_v2 &lt;chr&gt;, ## # scrn_bracescallback_v2 &lt;chr&gt;, scrn_nr_hair_v2 &lt;chr&gt;, scrn_nr_hair_metal_v2 &lt;chr&gt;, ## # scrn_nr_hair_remove &lt;chr&gt;, scrn_nr_hair_date_v2 &lt;chr&gt;, scrn_nr_hair_callback_v2 &lt;chr&gt;, ## # scrn_eyeliner_v2 &lt;chr&gt;, scrn_nr_piercing_v2 &lt;chr&gt;, scrn_nr_piercing_remove &lt;chr&gt;, ## # scrn_nr_piercing_date &lt;chr&gt;, scrn_nr_piercing_callback &lt;chr&gt;, scrn_surgery_v2 &lt;chr&gt;, ## # scrn_height_v2 &lt;chr&gt;, scrn_weight_v2 &lt;chr&gt;, scrn_concerns &lt;chr&gt;, scrn_concerns_desc &lt;chr&gt;, ... That helped, but R still thinks that all of our variables are character strings. We need to tell R that some of our variables might be numbers and that we want it to guess which ones those are. We can do that with the very handy type_convert() function. abcd_df &lt;- type_convert(abcd_df) head(abcd_df) ## # A tibble: 6 x 41 ## collection_id abcd_screen02_id dataset_id subjectkey src_subject_id interview_date interview_age ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2573 6579 47156 NDAR_INV0CZB~ NDAR_INV0CZBU~ 07/19/2019 136 ## 2 2573 6581 47156 NDAR_INV0D4C~ NDAR_INV0D4C1~ 03/10/2019 154 ## 3 2573 6588 47156 NDAR_INV0DKW~ NDAR_INV0DKWE~ 11/30/2019 152 ## 4 2573 6594 47156 NDAR_INV0E35~ NDAR_INV0E350~ 12/16/2019 137 ## 5 2573 6609 47156 NDAR_INV0FM9~ NDAR_INV0FM9M~ 11/27/2019 140 ## 6 2573 6630 47156 NDAR_INV0HFH~ NDAR_INV0HFHM~ 11/12/2020 152 ## # ... with 34 more variables: sex &lt;chr&gt;, eventname &lt;chr&gt;, scrn2_select_language___1 &lt;dbl&gt;, ## # scrn_braces_v2 &lt;dbl&gt;, scrn_future_braces &lt;dbl&gt;, scrn_bracesdate_v2 &lt;chr&gt;, ## # scrn_bracescallback_v2 &lt;dbl&gt;, scrn_nr_hair_v2 &lt;dbl&gt;, scrn_nr_hair_metal_v2 &lt;dbl&gt;, ## # scrn_nr_hair_remove &lt;dbl&gt;, scrn_nr_hair_date_v2 &lt;lgl&gt;, scrn_nr_hair_callback_v2 &lt;lgl&gt;, ## # scrn_eyeliner_v2 &lt;dbl&gt;, scrn_nr_piercing_v2 &lt;dbl&gt;, scrn_nr_piercing_remove &lt;dbl&gt;, ## # scrn_nr_piercing_date &lt;lgl&gt;, scrn_nr_piercing_callback &lt;dbl&gt;, scrn_surgery_v2 &lt;dbl&gt;, ## # scrn_height_v2 &lt;dbl&gt;, scrn_weight_v2 &lt;dbl&gt;, scrn_concerns &lt;dbl&gt;, scrn_concerns_desc &lt;chr&gt;, ... 4.1.3 Copy/paste-able code Putting it all together, we can import an ABCD dataset like so. abcd_df &lt;- read_delim(&#39;data/abcd_screen02.txt&#39;, delim = &#39;\\t&#39;) %&gt;% filter(row_number() != 1) %&gt;% type_convert() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
